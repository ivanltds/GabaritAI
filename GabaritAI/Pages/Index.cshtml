@page
@model GabaritAI.Pages.IndexModel
@{
    ViewData["Title"] = "GabaritAI Chat 💬";
}

<div class="chat-container">
    <h2 class="chat-title">GabaritAI 🤖</h2>

    <div class="chat-box" id="chatBox">
        @if (Model.Messages != null && Model.Messages.Count > 0)
        {
            foreach (var msg in Model.Messages)
            {
                if (msg.StartsWith("Você:"))
                {
                    <div class="message user">@msg</div>
                }
                else if (msg.StartsWith("🤖"))
                {
                    <div class="message ai">@msg</div>
                }
                else if (msg.StartsWith("⏳"))
                {
                    <div class="message typing">@msg</div>
                }
            }
        }
        else
        {
            <div class="message system">Envie uma mensagem para começar a conversa.</div>
        }
    </div>

    <form onsubmit="return sendMessage(event)" class="chat-input">
        <input id="userMessage" class="input-field" placeholder="Digite sua mensagem..." autocomplete="off" />
        <button type="submit" class="send-button">Enviar</button>
    </form>
</div>

@section Scripts {
<script>
async function sendMessage(event) {
    event.preventDefault();
    const input = document.getElementById("userMessage");
    const chatBox = document.getElementById("chatBox");
    const message = input.value.trim();
    if (!message) return;

    // Adiciona a mensagem do usuário instantaneamente
    const userDiv = document.createElement("div");
    userDiv.className = "message user";
    userDiv.textContent = "Você: " + message;
    chatBox.appendChild(userDiv);
    chatBox.scrollTop = chatBox.scrollHeight;

    // Placeholder "IA está digitando..."
    const typingDiv = document.createElement("div");
    typingDiv.className = "message typing";
    typingDiv.textContent = "⏳ GabaritAI está digitando...";
    chatBox.appendChild(typingDiv);
    chatBox.scrollTop = chatBox.scrollHeight;

    input.value = "";

    try {
        const response = await fetch("?handler=Message", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message })
        });

        const data = await response.json();

        // Substitui placeholder pela resposta real da IA
        typingDiv.className = "message ai";
        typingDiv.textContent = data.response.startsWith("🤖") ? data.response : "🤖 " + data.response;
        chatBox.scrollTop = chatBox.scrollHeight;

    } catch (error) {
        typingDiv.className = "message ai";
        typingDiv.textContent = "⚠️ Erro ao conectar com a IA.";
    }
}
</script>
}

<style>
    body {
        background: #f2f2f7;
        font-family: "Segoe UI", Arial, sans-serif;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 90vh;
        max-width: 600px;
        margin: 2rem auto;
        border-radius: 16px;
        background: #fff;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .chat-title {
        background: linear-gradient(135deg, #007bff, #00bfff);
        color: #fff;
        padding: 1rem;
        text-align: center;
        font-weight: 600;
        letter-spacing: 1px;
    }

    .chat-box {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
    }

    .message {
        max-width: 75%;
        padding: 10px 15px;
        margin: 6px 0;
        border-radius: 15px;
        word-wrap: break-word;
        animation: fadeIn 0.2s ease-in;
    }

    .message.user {
        align-self: flex-end;
        background: #007bff;
        color: white;
        border-bottom-right-radius: 3px;
    }

    .message.ai {
        align-self: flex-start;
        background: #e5e5ea;
        color: #000;
        border-bottom-left-radius: 3px;
    }

    .message.typing {
        align-self: flex-start;
        background: #fff3cd;
        color: #856404;
        font-style: italic;
    }

    .message.system {
        text-align: center;
        color: #888;
        margin-top: 2rem;
        font-style: italic;
    }

    .chat-input {
        display: flex;
        border-top: 1px solid #ddd;
        background: #fafafa;
        padding: 0.5rem;
    }

    .input-field {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 0.6rem 0.8rem;
        outline: none;
        font-size: 1rem;
    }

    .send-button {
        margin-left: 0.5rem;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        cursor: pointer;
        font-weight: 600;
        transition: background 0.2s;
    }

    .send-button:hover {
        background: #0056b3;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>
