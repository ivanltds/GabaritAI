@page
@model GabaritAI.Pages.OpenAITestModel
@{
    ViewData["Title"] = "Chat com Mem√≥ria üß†";
}

<div class="chat-container">
    <div id="chat-box" class="chat-box">
        @foreach (var msg in Model.ConversationHistory)
        {
            var isUser = msg.EndsWith(":Voc√™");
            <div class="message @(isUser ? "user" : "ai")">@msg</div>
        }
    </div>

    <form id="chat-form" onsubmit="return sendMessage(event)">
        <input type="text" id="prompt" placeholder="Digite sua mensagem..." autocomplete="off" />
        <button type="submit">Enviar</button>
    </form>
</div>

@section Scripts {
<script>
async function sendMessage(event) {
    event.preventDefault(); // previne reload

    const input = document.getElementById('prompt');
    const chatBox = document.getElementById('chat-box');
    const message = input.value.trim();
    if (!message) return; // n√£o envia se vazio

    // 1Ô∏è‚É£ Adiciona a mensagem do usu√°rio imediatamente
    const userDiv = document.createElement('div');
    userDiv.className = 'message user';
    userDiv.textContent = message + ' :Voc√™';
    chatBox.appendChild(userDiv);
    scrollToBottom();

    input.value = ''; // limpa input

    // 2Ô∏è‚É£ Envia a mensagem para o servidor via fetch
    const response = await fetch('/OpenAITest', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({Prompt: message})
    });

    if (response.ok) {
        const data = await response.json(); // IA retorna s√≥ a resposta
        const aiDiv = document.createElement('div');
        aiDiv.className = 'message ai';
        aiDiv.textContent = 'IA: ' + data.response;
        chatBox.appendChild(aiDiv);
        scrollToBottom();
    } else {
        console.error('Erro ao chamar IA');
    }
}

function scrollToBottom() {
    const chatBox = document.getElementById('chat-box');
    chatBox.scrollTo({top: chatBox.scrollHeight, behavior: 'smooth'});
}
</script>
}

    <style>
        body {
            background: #f4f4f4;
            font-family: Arial, sans-serif;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 90vh;
            max-width: 600px;
            margin: 2rem auto;
            border: 1px solid #ccc;
            border-radius: 10px;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        .chat-box {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            scroll-behavior: smooth; /* fallback CSS */
        }
        .message {
            max-width: 70%;
            padding: 0.6rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 15px;
            word-wrap: break-word;
        }

        /* Usu√°rio */
        .message.user {
            background-color: #007bff;
            color: white;
            margin-left: auto;
            text-align: right;
            border-bottom-right-radius: 0;
        }

        /* IA */
        .message.ai {
            background-color: #e5e5ea;
            color: black;
            margin-right: auto;
            text-align: left;
            border-bottom-left-radius: 0;
        }
        form {
            display: flex;
            border-top: 1px solid #ddd;
            padding: 0.5rem;
            background: #fafafa;
            position: sticky;
            bottom: 0;
        }

        input[type="text"] {
            flex: 1;
            padding: 0.6rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
        }

        button {
            margin-left: 0.5rem;
            padding: 0.6rem 1rem;
            background: #007bff;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
        }

        button:hover {
            background: #0056b3;
        }
    </style>
}
